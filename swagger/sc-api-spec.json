{
  "swagger": "2.0",
  "info": {
    "description": "SocioCortex REST API",
    "version": "1.0.0",
    "title": "SocioCortex REST API",
    "contact": {
      "name": "SC API support",
      "email": "sociocortex.sebis@tum.de"
    }
  },
  "host": "server.sociocortex.de",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    }
  },
  "paths": {
    "/workspaces": {
      "get": {
        "tags": [
          "workspace"
        ],
        "summary": "Return the list of workspaces",
        "description": "Return the list of workspaces",
        "operationId": "workspaces",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/workspace"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace"
        ],
        "summary": "Create a new Workspace",
        "description": "Create a new Workspace",
        "operationId": "createWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Workspace",
            "description": "New Workspace in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}": {
      "get": {
        "tags": [
          "workspace"
        ],
        "summary": "Get an Workspace by ID",
        "description": "Get an Workspace by ID",
        "operationId": "getWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "workspace"
        ],
        "summary": "Update an Workspace by ID",
        "description": "Update an Workspace by ID",
        "operationId": "updateWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Workspace",
            "description": "Updated Workspace in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "workspace"
        ],
        "summary": "Delete an Workspace by ID",
        "description": "Delete an Workspace by ID",
        "operationId": "deleteWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/entities": {
      "get": {
        "tags": [
          "workspace",
          "entity"
        ],
        "summary": "Returns all the entities in the Workspace",
        "description": "Returns all the entities in the Workspace",
        "operationId": "workspaceEntities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace",
          "entity"
        ],
        "summary": "Creates an entity in the Workspace",
        "description": "Creates an entity in the Workspace",
        "operationId": "createEntityInWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "New Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/entityTypes": {
      "get": {
        "tags": [
          "workspace",
          "entityType"
        ],
        "summary": "Returns all the entity types in the Workspace",
        "description": "Returns all the entity types in the Workspace",
        "operationId": "workspaceTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace",
          "entityType"
        ],
        "summary": "Create an entity type in the Workspace",
        "description": "Create an entity type in the Workspace",
        "operationId": "createEntityTypeInWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "EntityType",
            "description": "New EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Creates a new Entity",
        "description": "Creates a new Entity",
        "operationId": "createEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Entity",
            "description": "New Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Gets an Entity by ID",
        "description": "Gets an Entity by ID",
        "operationId": "getEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Update an Entity by ID",
        "description": "Update an Entity by ID",
        "operationId": "updateEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "Updated Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "entity"
        ],
        "summary": "Delete an Entity by ID",
        "description": "Delete an Entity by ID",
        "operationId": "deleteEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/attributes": {
      "get": {
        "tags": [
          "entity",
          "attribute"
        ],
        "summary": "Return a list of Entity attributes",
        "description": "Return a list of Entity attributes",
        "operationId": "attributes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attribute"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Add a new  Entity attribute",
        "description": "Add a new Entity attribute",
        "operationId": "newAttributeForEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity Attribute",
            "description": "Entity Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributes": {
      "post": {
        "tags": [
          "attribute"
        ],
        "summary": "Create a new attribute",
        "description": "Create a new attribute",
        "operationId": "newAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Entity Attribute",
            "description": "Entity Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributes/{attributeId}": {
      "get": {
        "tags": [
          "attribute"
        ],
        "summary": "Gets an Attribute by ID",
        "description": "Gets an Attribute by ID",
        "operationId": "getAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "attribute"
        ],
        "summary": "Update an Attribute by ID",
        "description": "Update an Attribute by ID",
        "operationId": "updateAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Attribute",
            "description": "Updated Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attribute"
        ],
        "summary": "Delete an Attribute by ID",
        "description": "Delete an Attribute by ID",
        "operationId": "deleteAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes": {
      "get": {
        "tags": [
          "entityType"
        ],
        "summary": "Return the list of entity types",
        "description": "Return the list of entity types",
        "operationId": "getEntityTypes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType"
        ],
        "summary": "Create a new entity type",
        "description": "Create a new entity type",
        "operationId": "createEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Type",
            "description": "New EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}": {
      "get": {
        "tags": [
          "entityType"
        ],
        "summary": "Get a EntityType by ID",
        "description": "Get an EntityType by ID",
        "operationId": "getEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "entityType"
        ],
        "summary": "Update an EntityType by ID",
        "description": "Update an EntityType by ID",
        "operationId": "updateEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "entityType"
        ],
        "summary": "Delete an EntityType by ID",
        "description": "Delete an EntityType by ID",
        "operationId": "deleteEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/entities": {
      "get": {
        "tags": [
          "entityType",
          "entity"
        ],
        "summary": "Return all the entities of entity type",
        "description": "Return all the entities of entity type",
        "operationId": "typeEntities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "entity"
        ],
        "summary": "Add a new Entity of Entity Type",
        "description": "Add a new Entity of Entity Type",
        "operationId": "newEntityForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/attributeDefinitions": {
      "get": {
        "tags": [
          "entityType",
          "attributeDefinition"
        ],
        "summary": "Return all attribute definitions of entity type",
        "description": "Return all attribute definitions of entity type",
        "operationId": "getAttributeDefinitionsOfType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attributeDefinition"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "attributeDefinition"
        ],
        "summary": "Create a new attribute definition for entity type",
        "description": "Create a new attribute definition for entity type",
        "operationId": "createAttributeDefinitionForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Attribute Definition",
            "description": "Updated Attribute Definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attributeDefinition"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributeDefinitions": {
      "post": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Create a new attribute definition",
        "description": "Create a new attribute definition",
        "operationId": "createAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "AttributeDefinition",
            "description": "New AttributeDefinition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributeDefinition/{attributeDefinitionId}": {
      "get": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Get an attribute definition by ID",
        "description": "Get an attribute definition by ID",
        "operationId": "getAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Update an attribute definition by ID",
        "description": "Update an attribute definition by ID",
        "operationId": "updateAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated attribute definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Delete an attribute definition by ID",
        "description": "Delete an attribute definition by ID",
        "operationId": "deleteAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Return the list of groups",
        "description": "Return the list of groups",
        "operationId": "groups",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/group"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create a new Group",
        "description": "Create a new Group",
        "operationId": "createGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Group",
            "description": "New Group in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get an Group by ID",
        "description": "Get an Group by ID",
        "operationId": "getGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update an Group by ID",
        "description": "Update an Group by ID",
        "operationId": "updateGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Group",
            "description": "Updated Group in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Delete an Group by ID",
        "description": "Delete an Group by ID",
        "operationId": "deleteGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return the list of users",
        "description": "Return the list of users",
        "operationId": "users",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new User",
        "description": "Create a new User",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "New User in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get an User by ID",
        "description": "Get an User by ID",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an User by ID",
        "description": "Update an User by ID",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "User",
            "description": "Updated User in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete an User by ID",
        "description": "Delete an User by ID",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/picture"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userId}/picture": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the profile picture of the User by ID",
        "description": "Get the profile picture of the User by ID",
        "operationId": "getUserPicture",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update the profile picture of the User by ID",
        "description": "Update the profile picture of the User by ID",
        "operationId": "updateUserPicture",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Picture",
            "description": "Link to profile picture of the user that is fetched",
            "required": true,
            "schema": {
              "$ref": "#/definitions/picture"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets the current User",
        "description": "Gets the current User",
        "operationId": "me",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlQuery": {
      "post": {
        "tags": [
          "mxl"
        ],
        "summary": "Performs a query without a context",
        "description": "Performs a query without a context",
        "operationId": "mxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlQuery": {
      "post": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Performs a query within a workspace",
        "description": "Performs a query within a workspace",
        "operationId": "workspaceMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlQuery": {
      "post": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Performs a query within an entity type",
        "description": "Performs a query within an entity type",
        "operationId": "entityTypeMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },

          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlQuery": {
      "post": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Performs a query within an entity",
        "description": "Performs a query within an entity",
        "operationId": "entityMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlValidation": {
      "post": {
        "tags": [
          "mxl"
        ],
        "summary": "Performs an MxL validation without a context",
        "description": "Performs an MxL validation without a context",
        "operationId": "mxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlValidation": {
      "post": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the workspace",
        "description": "Performs an MxL validation within the workspace",
        "operationId": "workspacePostMxl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlValidation": {
      "post": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the entity type",
        "description": "Performs an MxL validation within the entity type",
        "operationId": "entityTypeMxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlValidation": {
      "post": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the entity",
        "description": "Performs an MxL validation within the entity",
        "operationId": "entityMxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints without specifying a context",
        "description": "Retrieves all MxL Auto Completion hints without specifying a context",
        "operationId": "autoCompletionHints",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the workspace",
        "description": "Retrieves all MxL Auto Completion hints for the workspace",
        "operationId": "workspaceAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace for which the hints should be generated",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the entity type",
        "description": "Retrieves all MxL Auto Completion hints for the entity type",
        "operationId": "entityTypeAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type for which the hints should be generated",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the entity",
        "description": "Retrieves all MxL Auto Completion hints for the entity",
        "operationId": "entityAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity for which the hints should be generated",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "attribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "attributeDefinition": {
          "$ref": "#/definitions/attributeDefinition",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "items": { }
        },
        "conversionErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "change": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/link"
        },
        "action": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "from": {

              },
              "to": {

              }
            }
          }
        }
      }
    },
    "entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "content": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/link"
        },
        "permissions": {
          "$ref": "#/definitions/permissions",
          "readOnly": true
        },
        "incomingReferences": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object"
          }

        },
        "history": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "workspace": {
          "$ref": "#/definitions/workspace"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/attribute"
          }
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "mayEdit": {
          "type": "boolean"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "cause": {
          "type": "string"
        },
        "additionalInformation": {
          "type": "object"
        }
      }
    },
    "picture": {
      "type": "string",
      "format": "binary"
    },
    "group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "administrators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "mxlBody": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string"
        },
        "expectedType": {
          "type": "string"
        },
        "parameterDefinitions": {
          "type": "string"
        }
      }
    },
    "mxlHint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "helpHeader": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "addOpeningBracket": {
          "type": "boolean"
        },
        "addApostrophes": {
          "type": "boolean"
        }
      }
    },
    "mxlHints": {
      "type": "object",
      "properties": {
        "staticFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "memberFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "globalIdentifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "basicTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "customTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "builtinAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        }
      }
    },
    "mxlResponse": {
      "type": "object",
      "properties": {
        "value": { },
        "type": {
          "type": "object"
        },
        "expression": {
          "type": "object"
        },
        "dependencies": {
          "type": "object"
        }
      }
    },
    "attributeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "multiplicity": {
          "type": "string",
          "enum": [ "any", "atLeastOne", "maxOne", "exacltyOne" ]
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "options": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "readOnly": {
          "type": "string"
        },
        "defaultValues": {
          "type": "array",
          "items": { }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true

        }
      }
    },
    "entityType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "workspace": {
          "$ref": "#/definitions/link"
        },
        "namePlural": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "allowFreeAttributes": {
          "type": "boolean"
        },
        "attributeDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastLoginDate": {
          "type": "string",
          "format": "date"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "workspace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "rootEntity": {
          "$ref": "#/definitions/link"
        },
        "permissions": {
          "$ref": "#/definitions/permissions",
          "readOnly": true
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "entityTree": {
          "$ref": "#/definitions/link"
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "permissions": {
      "type": "object",
      "properties": {
        "readers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "writers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      }

    }
  }
}