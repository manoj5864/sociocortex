{
  "swagger": "2.0",
  "info": {
    "description": "SocioCortex REST API",
    "version": "1.0.0",
    "title": "SocioCortex REST API",
    "contact": {
      "name": "SC API support",
      "email": "sociocortex.sebis@tum.de"
    }
  },
  "host": "server.sociocortex.de",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    }
  },
  "paths": {
    "/workspaces": {
      "get": {
        "tags": [
          "workspace"
        ],
        "summary": "Returns a list of all workspaces",
        "description": "Returns a list of all workspaces",
        "operationId": "workspaces",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace"
        ],
        "summary": "Creates a new workspace",
        "description": "Creates a new workspace",
        "operationId": "createWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Workspace",
            "description": "New Workspace in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}": {
      "get": {
        "tags": [
          "workspace"
        ],
        "summary": "Returns the workspace with the given ID",
        "description": "Returns the workspace with the given ID",
        "operationId": "getWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "workspace"
        ],
        "summary": "Does an incremental update of the workspace with the given ID",
        "description": "Does an incremental update of the workspace with the given ID",
        "operationId": "updateWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Workspace",
            "description": "Updated Workspace in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/workspace"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "workspace"
        ],
        "summary": "Deletes the workspace with the given ID",
        "description": "Deletes the workspace with the given ID",
        "operationId": "deleteWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/entities": {
      "get": {
        "tags": [
          "workspace",
          "entity"
        ],
        "summary": "Returns all the entities in the workspace with the given ID",
        "description": "Returns all the entities in the workspace with the given ID",
        "operationId": "workspaceEntities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace",
          "entity"
        ],
        "summary": "Creates an entity in the workspace with the given ID",
        "description": "Creates an entity in the workspace with the given ID",
        "operationId": "createEntityInWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "New Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/entityTypes": {
      "get": {
        "tags": [
          "workspace",
          "entityType"
        ],
        "summary": "Returns all the entity types in the workspace with the given ID",
        "description": "Returns all the entity types in the workspace with the given ID",
        "operationId": "workspaceTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace",
          "entityType"
        ],
        "summary": "Creates an entity type in the workspace with the given ID",
        "description": "Creates an entity type in the workspace with the given ID",
        "operationId": "createEntityTypeInWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "EntityType",
            "description": "New EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/customFunctions": {
      "get": {
        "tags": [
          "workspace",
          "customFunction"
        ],
        "summary": "Returns all the static custom functions in the workspace with the given ID",
        "description": "Returns all the static custom functions in the workspace with the given ID",
        "operationId": "workspaceCustomFunctions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "workspace",
          "customFunction"
        ],
        "summary": "Creates a static custom function in the workspace with the given ID",
        "description": "Creates a static custom function in the workspace with the given ID",
        "operationId": "createCustomFunctionInWorkspace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "CustomFunction",
            "description": "New CustomFunction in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Creates a new entity",
        "description": "Creates a new entity",
        "operationId": "createEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Entity",
            "description": "New Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "Returns the entity with the given ID",
        "description": "Returns the entity with the given ID",
        "operationId": "getEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "Does an incremental update of the entity with the given ID",
        "description": "Does an incremental update of the entity with the given ID",
        "operationId": "updateEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "Updated Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "entity"
        ],
        "summary": "Deletes the entity with the given ID",
        "description": "Deletes the entity with the given ID",
        "operationId": "deleteEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/attributes": {
      "get": {
        "tags": [
          "entity",
          "attribute"
        ],
        "summary": "Returns the attributes of the entity with the given ID",
        "description": "Returns the attributes of the entity with the given ID",
        "operationId": "attributes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attribute"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "Creates an attribute for the entity with the given ID",
        "description": "Creates an attribute for the entity with the given ID",
        "operationId": "newAttributeForEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity Attribute",
            "description": "Entity Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributes": {
      "post": {
        "tags": [
          "attribute"
        ],
        "summary": "Creates a new attribute",
        "description": "Creates a new attribute",
        "operationId": "newAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Entity Attribute",
            "description": "Entity Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributes/{attributeId}": {
      "get": {
        "tags": [
          "attribute"
        ],
        "summary": "Returns the attribute with the given ID",
        "description": "Returns the attribute with the given ID",
        "operationId": "getAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "attribute"
        ],
        "summary": "Does an incremental update of the attribute with the given ID",
        "description": "Does an incremental update of the attribute with the given ID",
        "operationId": "updateAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Attribute",
            "description": "Updated Attribute in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attribute"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attribute"
        ],
        "summary": "Deletes the attribute with the given ID",
        "description": "Deletes the attribute with the given ID",
        "operationId": "deleteAttribute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "description": "ID of the attribute that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/files": {
      "get": {
        "tags": [
          "entity",
          "file"
        ],
        "summary": "Returns the files of the entity with the given ID",
        "description": "Returns the files of the entity with the given ID",
        "operationId": "filesByEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/file"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entity",
          "file"
        ],
        "summary": "Creates a file for the entity with the given ID",
        "description": "Creates a file for the entity with the given ID",
        "operationId": "newFileForEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "File Attributes",
            "description": "File Attributes in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/file"
            }
          },
          "400": {
            "description": "Invalid ID or File Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or File not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files": {
      "post": {
        "tags": [
          "file"
        ],
        "summary": "Creates a new file",
        "description": "Creates a new file",
        "operationId": "newFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "File Attributes",
            "description": "File Attributes in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/file"
            }
          },
          "400": {
            "description": "Invalid ID or File Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or File not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "Returns the file with the given ID",
        "description": "Returns the file with the given ID",
        "operationId": "getFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "ID of the file that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/file"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "file"
        ],
        "summary": "Does an incremental update of the file with the given ID",
        "description": "Does an incremental update of the file with the given ID",
        "operationId": "updateFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "ID of the file that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Attribute",
            "description": "Updated File in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/file"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/file"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "file"
        ],
        "summary": "Deletes the file with the given ID",
        "description": "Deletes the file with the given ID",
        "operationId": "deleteFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "ID of the file that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes": {
      "post": {
        "tags": [
          "entityType"
        ],
        "summary": "Creates a new entity type",
        "description": "Creates a new entity type",
        "operationId": "createEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Type",
            "description": "New EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}": {
      "get": {
        "tags": [
          "entityType"
        ],
        "summary": "Returns the entity type with the given ID",
        "description": "Returns the entity type with the given ID",
        "operationId": "getEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "entityType"
        ],
        "summary": "Does an incremental update of the entity type with the given ID",
        "description": "Does an incremental update of the entity type with the given ID",
        "operationId": "updateEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated EntityType in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entityType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "entityType"
        ],
        "summary": "Deletes the entity type with the given ID",
        "description": "Deletes the entity type with the given ID",
        "operationId": "deleteEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/entities": {
      "get": {
        "tags": [
          "entityType",
          "entity"
        ],
        "summary": "Returns all entities of the entity type with the given ID",
        "description": "Returns all entities of the entity type with the given ID",
        "operationId": "typeEntities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "entity"
        ],
        "summary": "Creates an entities for the entity type with the given ID",
        "description": "Creates an entities for the entity type with the given ID",
        "operationId": "newEntityForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entity",
            "description": "Entity in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entity"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/entity"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity or Attribute not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/attributeDefinitions": {
      "get": {
        "tags": [
          "entityType",
          "attributeDefinition"
        ],
        "summary": "Returns all attribute definitions of the entity type with the given ID",
        "description": "Return all attribute definitions of entity type",
        "operationId": "getAttributeDefinitionsOfType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "attributeDefinition"
        ],
        "summary": "Creates an attribute definition for the entity type with the given ID",
        "description": "Creates an attribute definition for the entity type with the given ID",
        "operationId": "createAttributeDefinitionForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Attribute Definition",
            "description": "Updated Attribute Definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attributeDefinition"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/derivedAttributeDefinitions": {
      "get": {
        "tags": [
          "entityType",
          "derivedAttributeDefinition"
        ],
        "summary": "Returns all derived attribute definitions of the entity type with the given ID",
        "description": "Return all derived attribute definitions of entity type",
        "operationId": "getDerivedAttributeDefinitionsOfType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "derivedAttributeDefinition"
        ],
        "summary": "Creates a derived attribute definition for the entity type with the given ID",
        "description": "Creates a derived attribute definition for the entity type with the given ID",
        "operationId": "createDerivedAttributeDefinitionForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Derived Attribute Definition",
            "description": "Updated Derived Attribute Definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/derivedAttributeDefinition"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/customFunctions": {
      "get": {
        "tags": [
          "entityType",
          "customFunction"
        ],
        "summary": "Returns all custom functions of the entity type with the given ID",
        "description": "Return all custom functions of entity type",
        "operationId": "getCustomFunctionsOfType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityType",
          "customFunction"
        ],
        "summary": "Creates a custom function for the entity type with the given ID",
        "description": "Creates a custom function for the entity type with the given ID",
        "operationId": "createCustomFunctionForEntityType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Custom Function",
            "description": "Updated Custom Function in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customFunction"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributeDefinitions": {
      "post": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Creates a new attribute definition",
        "description": "Creates a new attribute definition",
        "operationId": "createAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "AttributeDefinition",
            "description": "New AttributeDefinition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/attributeDefinition/{attributeDefinitionId}": {
      "get": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Returns the attribute definition with the given ID",
        "description": "Returns the attribute definition with the given ID",
        "operationId": "getAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Does an incremental update of the attribute definition with the given ID",
        "description": "Does an incremental update of the attribute definition with the given ID",
        "operationId": "updateAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated attribute definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/attributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attributeDefinition"
        ],
        "summary": "Deletes the attribute definition with the given ID",
        "description": "Deletes the attribute definition with the given ID",
        "operationId": "deleteAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "attributeDefinitionId",
            "description": "ID of the attribute definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/derivedAttributeDefinitions": {
      "post": {
        "tags": [
          "derivedAttributeDefinition"
        ],
        "summary": "Creates a new derived attribute definition",
        "description": "Creates a new derived attribute definition",
        "operationId": "createDerivedAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "DerivedAttributeDefinition",
            "description": "New DerivedAttributeDefinition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/derivedAttributeDefinitions/{derivedAttributeDefinitionId}": {
      "get": {
        "tags": [
          "derivedAttributeDefinition"
        ],
        "summary": "Returns the derived attribute definition with the given ID",
        "description": "Returns the derived attribute definition with the given ID",
        "operationId": "getDerivedAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "derivedAttributeDefinitionId",
            "description": "ID of the derived attribute definition that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Derived attribute definition not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "derivedAttributeDefinition"
        ],
        "summary": "Does an incremental update of the derived attribute definition with the given ID",
        "description": "Does an incremental update of the derived attribute definition with the given ID",
        "operationId": "updateDerivedAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "derivedAttributeDefinitionId",
            "description": "ID of the derived attribute definition that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated derived attribute definition in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/derivedAttributeDefinition"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "derivedAttributeDefinition"
        ],
        "summary": "Deletes the derived attribute definition with the given ID",
        "description": "Deletes the derived attribute definition with the given ID",
        "operationId": "deleteDerivedAttributeDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "derivedAttributeDefinitionId",
            "description": "ID of the derived attribute definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/customFunctions": {
      "get": {
        "tags": [
          "customFunction"
        ],
        "summary": "Returns a list of all global static functions",
        "description": "Returns a list of all global static functions",
        "operationId": "globalStaticFunctions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customFunction"
        ],
        "summary": "Creates a new custom function",
        "description": "Creates a new custom function",
        "operationId": "createCustomFunction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "CustomFunction",
            "description": "New CustomFunction in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/customFunctions/{customFunctionId}": {
      "get": {
        "tags": [
          "customFunction"
        ],
        "summary": "Returns the custom function with the given ID",
        "description": "Returns the custom function with the given ID",
        "operationId": "getCustomFunction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customFunctionId",
            "description": "ID of the custom function that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Custom function not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "customFunction"
        ],
        "summary": "Does an incremental update of the custom function with the given ID",
        "description": "Does an incremental update of the custom function with the given ID",
        "operationId": "updateCustomFunction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customFunctionId",
            "description": "ID of the custom function that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Type",
            "description": "Updated custom function in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/customFunction"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Custom function not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customFunction"
        ],
        "summary": "Deletes the custom function with the given ID",
        "description": "Deletes the custom function with the given ID",
        "operationId": "deleteCustomFunction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customFunctionId",
            "description": "ID of the custom function that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Returns all groups",
        "description": "Returns all groups",
        "operationId": "groups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/group"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Creates a new group",
        "description": "Creates a new group",
        "operationId": "createGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Group",
            "description": "New Group in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Returns the group with the given ID",
        "description": "Returns the group with the given ID",
        "operationId": "getGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Does an incremental update of the group with the given ID",
        "description": "Does an incremental update of the group with the given ID",
        "operationId": "updateGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Group",
            "description": "Updated Group in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Deletes the group with the given ID",
        "description": "Deletes the group with the given ID",
        "operationId": "deleteGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "ID of the group that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 400,
                "detail": "Invalid ID supplied"
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "examples": {
              "application/json": {
                "status_code": 404,
                "detail": "Not Found"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns all users",
        "description": "Returns all users",
        "operationId": "users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates a new user",
        "description": "Creates a new user",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "New User in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns the user with the given ID",
        "description": "Returns the user with the given ID",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Does an incremental update of the user with the given ID",
        "description": "Does an incremental update of the user with the given ID",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "User",
            "description": "Updated User in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes the user with the given ID",
        "description": "Deletes the user with the given ID",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/picture"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userId}/picture": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns the profile picture of the user with the given ID",
        "description": "Returns the profile picture of the user with the given ID",
        "operationId": "getUserPicture",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates the profile picture of the user with the given ID",
        "description": "Updates the profile picture of the user with the given ID",
        "operationId": "updateUserPicture",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Picture",
            "description": "Link to profile picture of the user that is fetched",
            "required": true,
            "schema": {
              "$ref": "#/definitions/picture"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userId}/tasks": {
      "get": {
        "tags": [
          "user",
          "task"
        ],
        "summary": "Returns all tasks for which the given user is the owner",
        "description": "Returns all tasks for which the given user is the owner",
        "operationId": "getTasksByUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "isinconsistent",
            "in": "query",
            "description": "An indication if only inconsistent tasks should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isoverdue",
            "in": "query",
            "description": "An indication if only isoverdue tasks should be included in the response",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user",
          "task"
        ],
        "summary": "Creates a task with the specified user as its owner",
        "description": "Creates a task with the specified user as its owner",
        "operationId": "newTaskForUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user that is fetched",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Task",
            "description": "Task in JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/task"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/task"
            }
          },
          "400": {
            "description": "Invalid ID or Attribute Name supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Task or User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns the current user",
        "description": "Returns the current user",
        "operationId": "me",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlQuery": {
      "post": {
        "tags": [
          "mxl"
        ],
        "summary": "Performs a query without a context",
        "description": "Performs a query without a context",
        "operationId": "mxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlQuery": {
      "post": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Performs a query within a workspace",
        "description": "Performs a query within a workspace",
        "operationId": "workspaceMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlQuery": {
      "post": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Performs a query within an entity type",
        "description": "Performs a query within an entity type",
        "operationId": "entityTypeMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlQuery": {
      "post": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Performs a query within an entity",
        "description": "Performs a query within an entity",
        "operationId": "entityMxlQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity in which the MxL query has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of the entity should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlValidation": {
      "post": {
        "tags": [
          "mxl"
        ],
        "summary": "Performs an MxL validation without a context",
        "description": "Performs an MxL validation without a context",
        "operationId": "mxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlValidation": {
      "post": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the workspace",
        "description": "Performs an MxL validation within the workspace",
        "operationId": "workspacePostMxl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlValidation": {
      "post": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the entity type",
        "description": "Performs an MxL validation within the entity type",
        "operationId": "entityTypeMxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the entity type in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlValidation": {
      "post": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Performs an MxL validation within the entity",
        "description": "Performs an MxL validation within the entity",
        "operationId": "entityMxlValidation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity in which the MxL validation has to be performed",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mxlBody",
            "description": "The standard body for MxL requests is a JSON object which can contain the attributes 'expression', 'parameterDefinitions', and 'expressionType'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mxlBody"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints without specifying a context",
        "description": "Retrieves all MxL Auto Completion hints without specifying a context",
        "operationId": "autoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "restrict",
            "description": "An optional MxL type declaration for which the auto completion hints should be generated",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "workspace",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the workspace",
        "description": "Retrieves all MxL Auto Completion hints for the workspace",
        "operationId": "workspaceAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace for which the hints should be generated",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "restrict",
            "description": "An optional MxL type declaration for which the auto completion hints should be generated",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entityTypes/{entityTypeId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "entityType",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the entity type",
        "description": "Retrieves all MxL Auto Completion hints for the entity type",
        "operationId": "entityTypeAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityTypeId",
            "description": "ID of the type for which the hints should be generated",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "restrict",
            "description": "An optional MxL type declaration for which the auto completion hints should be generated",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/entities/{entityId}/mxlAutoCompletionHints": {
      "get": {
        "tags": [
          "entity",
          "mxl"
        ],
        "summary": "Retrieves all MxL Auto Completion hints for the entity",
        "description": "Retrieves all MxL Auto Completion hints for the entity",
        "operationId": "entityAutoCompletionHints",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "ID of the entity for which the hints should be generated",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "restrict",
            "description": "An optional MxL type declaration for which the auto completion hints should be generated",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/mxlHints"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/taskDefinitions": {
      "get": {
        "tags": [
          "taskDefinition"
        ],
        "summary": "Returns a list of task definitions",
        "description": "Returns a list of task definitions",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "taskDefinition"
        ],
        "summary": "Creates a new task definition",
        "description": "Creates a new task definition and returns it with the new id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "taskDefinitionBody",
            "description": "The standard body for task definitions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/taskDefinitions/{taskDefinitionId}": {
      "get": {
        "tags": [
          "taskDefinition"
        ],
        "summary": "Returns a specific task definition",
        "description": "Returns a specific task definition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          "400": {
            "description": "the requested id cannot be found"
          }
        }
      },
      "put": {
        "tags": [
          "taskDefinition"
        ],
        "summary": "Updates a specific task definition",
        "description": "Updates a specific task definition. The parameters \"uid\" and \"id\" in the body have no effect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "taskDefinitionBody",
            "description": "The standard body for task definitions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that is updated. The parameters \"uid\" and \"id\" in the body have no effect.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "taskDefinition"
        ],
        "summary": "Deletes a specific task definition",
        "description": "Deletes a specific task definition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/taskDefinitions/{taskDefinitionId}/preconditions": {
      "get": {
        "tags": [
          "taskDefinition",
          "sentry"
        ],
        "summary": "Returns a list of sentries which represent preconditions of the specified task definition",
        "description": "Returns a list of sentries which represent preconditions of the specified task definition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      }
    },
    "/taskDefinitions/{taskDefinitionId}/satisfies": {
      "get": {
        "tags": [
          "taskDefinition",
          "sentry"
        ],
        "summary": "Returns a list of sentries for which the given task definition is a criterium",
        "description": "Returns a list of sentries for which the given task definition is a criterium",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      }
    },
    "/stages": {
      "get": {
        "tags": [
          "stage"
        ],
        "summary": "Returns a list of stages",
        "description": "Returns a list of stages",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stage"
        ],
        "summary": "Creates a new stage",
        "description": "Creates a new stage and returns it with the new id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stageBody",
            "description": "The standard body for stages",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stage"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stage"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/stages/{stageId}": {
      "get": {
        "tags": [
          "stage"
        ],
        "summary": "Returns a specific stage",
        "description": "Returns a specific stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stage"
            }
          },
          "400": {
            "description": "the requested id cannot be found"
          }
        }
      },
      "put": {
        "tags": [
          "stage"
        ],
        "summary": "Updates a specific stage",
        "description": "Updates a specific stage. The parameters \"uid\" and \"id\" in the body have no effect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stageBody",
            "description": "The standard body for stages",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stage"
            }
          },
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is updated. The parameters \"uid\" and \"id\" in the body have no effect.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/stage"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "stage"
        ],
        "summary": "Deletes a specific stage",
        "description": "Deletes a specific stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation. Returns the deleted stage.",
            "schema": {
              "$ref": "#/definitions/stage"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/sentries": {
      "post": {
        "tags": [
          "sentry"
        ],
        "summary": "Creates a new sentry",
        "description": "Creates a new sentry and returns it with the new id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "sentryBody",
            "description": "The standard body for sentries",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/sentries/{sentryId}": {
      "get": {
        "tags": [
          "sentry"
        ],
        "summary": "Returns a specific sentry",
        "description": "Returns a specific sentry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sentryId",
            "description": "ID of the sentry that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          },
          "400": {
            "description": "the requested id cannot be found"
          }
        }
      },
      "put": {
        "tags": [
          "sentry"
        ],
        "summary": "Updates a specific sentry",
        "description": "Updates a specific sentry. The parameter \"id\" in the body have no effect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "sentryBody",
            "description": "The standard body for sentries",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          },
          {
            "in": "path",
            "name": "sentryId",
            "description": "ID of the sentry that is updated. The parameters \"id\" in the body have no effect.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentry"
        ],
        "summary": "Deletes a specific sentry",
        "description": "Deletes a specific sentry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sentryId",
            "description": "ID of the sentry that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation. Returns the deleted sentry.",
            "schema": {
              "$ref": "#/definitions/sentry"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/stages/{stageId}/preconditions": {
      "get": {
        "tags": [
          "stage",
          "sentry"
        ],
        "summary": "Returns a list of sentries which represent preconditions of the specified stage",
        "description": "Returns a list of sentries which represent preconditions of the specified stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      }
    },
    "/stages/{stageId}/satisfies": {
      "get": {
        "tags": [
          "stage",
          "sentry"
        ],
        "summary": "Returns a list of sentries for which the given stage is a criterium",
        "description": "Returns a list of sentries for which the given stage is a criterium",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      }
    },
    "/stages/{stageId}/taskDefinitions": {
      "get": {
        "tags": [
          "stage",
          "taskDefinition"
        ],
        "summary": "Returns a list of task definitions which are owned by the specified stage",
        "description": "Returns a list of task definitions which are owned by the specified stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stage",
          "taskDefinition"
        ],
        "summary": "Creates a new task definition and adds it to the specified stage",
        "description": "Creates a new task definition, adds it to the specified stage and returns it with the new id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "taskDefinitionBody",
            "description": "The standard body for task definitions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is used",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/taskDefinition"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/stages/{stageId}/taskDefinitions/{taskDefinitionId}": {
      "put": {
        "tags": [
          "stage",
          "taskDefinition"
        ],
        "summary": "Adds the specified taskDefinition to the stage",
        "description": "Adds the specified taskDefinition to the stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition which is added to the stage",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "stage",
          "taskDefinition"
        ],
        "summary": "Deletes a specific task definition from a stage",
        "description": "Deletes a specific task definition from a stage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskDefinitionId",
            "description": "ID of the task definition that removed from the stage",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "stageId",
            "description": "ID of the stage that is manipulated",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/searchHints": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Retrieves a list of search hints containing basic information and a disambiguation of search hits.",
        "description": "Retrieves a list of search hints containing basic information and a disambiguation of search hits.",
        "operationId": "searchHints",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspace",
            "in": "query",
            "description": "The ID of the workspace the search hits have to be part of",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "The ID of the entity type for the search hits",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "The resource type for the search hits",
            "required": false,
            "type": "string"
          },
          {
            "name": "invalidValues",
            "in": "query",
            "description": "Set to true if the search hits have to contain invalid values",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "invalidLinks",
            "in": "query",
            "description": "Set to true if the search hits have to contain invalid links",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Determines the sort order. Possible values are 'relevance', 'lastModification', or 'alphabetically'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "n",
            "in": "query",
            "description": "max search hints to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "totalCount": {
                  "type": "string",
                  "format": "int32"
                },
                "hints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "href": {
                        "type": "string"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "disambiguation": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/searchResults": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Retrieves a list of search hints containing full information, e.g., attributes of entities, meta information, and highlighted search hits.",
        "description": "Retrieves a list of search hints containing full information, e.g., attributes of entities, meta information, and highlighted search hits.",
        "operationId": "searchResults",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspace",
            "in": "query",
            "description": "The ID of the workspace the search hits have to be part of",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "The ID of the entity type for the search hits",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "The resource type for the search hits",
            "required": false,
            "type": "string"
          },
          {
            "name": "invalidValues",
            "in": "query",
            "description": "Set to true if the search hits have to contain invalid values",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "invalidLinks",
            "in": "query",
            "description": "Set to true if the search hits have to contain invalid links",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "n",
            "in": "query",
            "description": "max search results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma-seperated list of attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta",
            "in": "query",
            "description": "A comma-seperated list of meta attribute names which should be included in the response (or * for all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "query",
            "description": "An indication if the rich-text content of entities should be included in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tasks",
            "in": "query",
            "description": "An indication if the tasks of entities should be included in the response",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "totalCount": {
                  "type": "string",
                  "format": "int32"
                },
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "href": {
                        "type": "string"
                      },
                      "resourceType": {
                        "type": "string"
                      },
                      "highlightedName": {
                        "type": "string"
                      },
                      "highlightedDisambiguation": {
                        "type": "string"
                      },
                      "highlightedContent": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/jwt": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Generates a signed JSON Web Token based on the credentials provided by Basic Authentication.",
        "description": "Generates a signed JSON Web Token based on the credentials provided by Basic Authentication.",
        "operationId": "getJwt",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/jwtResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Returns an object which contains basic application settings.",
        "description": "Returns an object which contains basic application settings.",
        "operationId": "getSettings",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/settings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Updates basic application settings",
        "description": "Updates basic application settings.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "settingsBody",
            "description": "The standard body for settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/settings"
            }
          }
        ],
        "security": [
          {
            "basicAuth": [ ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/settings"
            }
          },
          "400": {
            "description": "Invalid body in request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
    }
  },
  "definitions": {
    "attribute": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "attributeDefinition": {
          "$ref": "#/definitions/link",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "items": { }
        },
        "conversionErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "file": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "entity": {
          "$ref": "#/definitions/link",
          "readOnly": true
        },
        "summary": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/filePermissions",
          "readOnly": true
        },
        "incomingReferences": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object"
          }

        },
        "history": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date"
        },
        "creator": {
          "$ref": "#/definitions/link"
        },
        "lastModifier": {
          "$ref": "#/definitions/link"
        },
        "mayEdit": {
          "type": "boolean"
        }
      }
    },
    "change": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/link"
        },
        "action": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "from": {

              },
              "to": {

              }
            }
          }
        }
      }
    },
    "entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "content": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/link"
        },
        "permissions": {
          "$ref": "#/definitions/entityPermissions",
          "readOnly": true
        },
        "incomingReferences": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object"
          }

        },
        "history": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "workspace": {
          "$ref": "#/definitions/link"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/attribute"
          }
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date"
        },
        "creator": {
          "$ref": "#/definitions/link"
        },
        "lastModifier": {
          "$ref": "#/definitions/link"
        },
        "mayEdit": {
          "type": "boolean"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "cause": {
          "type": "string"
        },
        "additionalInformation": {
          "type": "object"
        }
      }
    },
    "picture": {
      "type": "string",
      "format": "binary"
    },
    "group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "administrators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        }
      }
    },
    "mxlBody": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string"
        },
        "expectedType": {
          "type": "string"
        },
        "parameterDefinitions": {
          "type": "string"
        }
      }
    },
    "mxlHint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "helpHeader": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "addOpeningBracket": {
          "type": "boolean"
        },
        "addApostrophes": {
          "type": "boolean"
        }
      }
    },
    "mxlHints": {
      "type": "object",
      "properties": {
        "staticFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "memberFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "globalIdentifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "basicTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "customTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        },
        "builtinAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mxlHint"
          }
        }
      }
    },
    "mxlResponse": {
      "type": "object",
      "properties": {
        "value": { },
        "type": {
          "type": "object"
        },
        "expression": {
          "type": "object"
        },
        "dependencies": {
          "type": "object"
        }
      }
    },
    "attributeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "multiplicity": {
          "type": "string",
          "enum": [ "any", "atLeastOne", "maxOne", "exacltyOne" ],
          "default": "any"
        },
        "attributeType": {
          "type": "string",
          "enum": [ "boolean", "date", "enumeration", "link", "notype", "number", "text" ],
          "default": "notype"
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "options": {
          "type": "object",
          "properties": {
            "entityType": {
              "$ref": "#/definitions/link"
            },
            "enumerationValues": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "regex": {
              "type": "string"
            },
            "resourceType": {
              "type": "string"
            },
            "inverseRoleName": {
              "type": "string"
            },
            "jsonTypeDefinition": {
              "type": "string"
            }
          }
        },
        "description": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "defaultValues": {
          "type": "array",
          "items": { }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true

        }
      }
    },
    "derivedAttributeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "inferredAttributeType": {
          "type": "string"
        },
        "explicitAttributeType": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "expression": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true

        }
      }
    },
    "customFunction": {
      "type": "object",
      "required": [ "name" ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "inferredReturnType": {
          "type": "string"
        },
        "explicitReturnType": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "workspace": {
          "$ref": "#/definitions/link"
        },
        "expression": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "string"
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "entityType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "workspace": {
          "$ref": "#/definitions/link"
        },
        "icon": {
          "type": "string"
        },
        "allowFreeAttributes": {
          "type": "boolean"
        },
        "attributeDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "derivedAttributeDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "customFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "entitiesCount": {
          "type": "number",
          "readOnly": true
        },
        "consistencyMetric": {
          "type": "number",
          "readOnly": true
        },
        "structurednessMetric": {
          "type": "number",
          "readOnly": true
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "lastLoginDate": {
          "type": "string",
          "format": "date"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "expertises": {
          "type": "object"
        },
        "mayCreateWorkspace": {
          "type": "boolean",
          "readOnly": true
        },
        "mayCreateGroup": {
          "type": "boolean",
          "readOnly": true
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "jwtResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "payload": {
          "type": "object",
          "properties": {
            "sub": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "exp": {
              "type": "integer"
            }
          }
        }
      }
    },
    "settings": {
      "type": "object",
      "properties": {
        "mayCreateGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "defaultWorkspace": {
          "$ref": "#/definitions/link"
        }
      }
    },
    "workspace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "rootEntity": {
          "$ref": "#/definitions/link"
        },
        "permissions": {
          "$ref": "#/definitions/workspacePermissions",
          "readOnly": true
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/change"
          }
        },
        "customFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "entityTree": {
          "$ref": "#/definitions/link"
        },
        "mayCreateEntities": {
          "type": "boolean",
          "readOnly": true
        },
        "isFavorite": {
          "type": "boolean"
        },
        "mayEdit": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "entity": {
          "$ref": "#/definitions/link"
        },
        "isProgressCalculated": {
          "type": "boolean",
          "readOnly": true
        },
        "skipped": {
          "type": "boolean",
          "readOnly": true
        },
        "isOverdue": {
          "type": "boolean",
          "readOnly": true
        },
        "isInconsistent": {
          "type": "boolean",
          "readOnly": true
        },
        "skippedAt": {
          "type": "string",
          "format": "date"
        },
        "finishedAt": {
          "type": "string",
          "format": "date"
        },
        "skippedBy": {
          "$ref": "#/definitions/link"
        },
        "finishedBy": {
          "$ref": "#/definitions/link"
        },
        "owner": {
          "$ref": "#/definitions/link"
        },
        "start": {
          "type": "string",
          "format": "date"
        },
        "end": {
          "type": "string",
          "format": "date"
        },
        "taskDefinition": {
          "$ref": "#/definitions/link"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "expertises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      },
      "required": [
        "name",
        "entity"
      ]
    },
    "taskDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "attributeDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      },
      "required": [
        "name",
        "entityType"
      ]
    },
    "stage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/link"
        },
        "taskDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      },
      "required": [
        "name",
        "entityType"
      ]
    },
    "sentry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enables": {
          "$ref": "#/definitions/link"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      },
      "required": [
        "name",
        "enables",
        "criteria"
      ]
    },
    "entityPermissions": {
      "type": "object",
      "properties": {
        "readers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "writers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "inheritedReaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "inheritedWriters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      }

    },
    "workspacePermissions": {
      "type": "object",
      "properties": {
        "readers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "writers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "administrators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "contributors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      }

    },
    "filePermissions": {
      "type": "object",
      "properties": {
        "readers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "inheritedReaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        },
        "inheritedWriters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/link"
          }
        }
      }

    }
  }
}
